name: FastAPI Docker CI/CD

on:
  push:
    branches:
      - develop
      - main

jobs:
  setup-docker-tag:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: Définir le tag Docker en fonction de la branche
        id: set-tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tag=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "tag=pre-prod" >> $GITHUB_OUTPUT
          else
            echo "tag=dev" >> $GITHUB_OUTPUT
          fi

  build-and-deploy-image:
    needs: setup-docker-tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v4

      - name: Valider le tag généré
        run: |
          TAG="${{ needs.setup-docker-tag.outputs.docker_tag }}"
          if [[ ! "$TAG" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
            echo "Invalid tag format: $TAG"
            exit 1
          fi

      - name: Connexion à GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Activer Buildx
        uses: docker/setup-buildx-action@v2

      - name: Construire et pousser l'image Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64/v8
          tags: ghcr.io/baptiste-ferrand/hexagonal-api:${{ needs.setup-docker-tag.outputs.docker_tag || 'latest' }}

  # deploy:
  #   needs: build-and-deploy-image
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
  #   steps:
  #     - name: Checkout du dépôt
  #       uses: actions/checkout@v4

  #     - name: Déduire l'environnement
  #       id: env
  #       run: |
  #         if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
  #           echo "env=prod" >> $GITHUB_OUTPUT
  #         else
  #           echo "env=pre-prod" >> $GITHUB_OUTPUT
  #         fi

  #     - name: Créer fichier .env
  #       run: |
  #         echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
  #         echo "BDD_NAME=${{ secrets.BDD_NAME }}" >> .env
  #         echo "BDD_USER=${{ secrets.BDD_USER }}" >> .env
  #         echo "BDD_PASSWORD=${{ secrets.BDD_PASSWORD }}" >> .env

  #     - name: Préparer clé SSH
  #       run: |
  #         echo "${{ secrets.RASPBERRY_SSH_KEY }}" > private_key.pem
  #         chmod 600 private_key.pem

  #     - name: Envoyer les fichiers sur le Raspberry
  #       run: |
  #         scp -i private_key.pem .env deploy.sh docker-compose.${{ steps.env.outputs.env }}.yml \
  #           ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }}:/home/${{ secrets.RASPBERRY_USER }}/app-${{ steps.env.outputs.env }}/

  #     - name: Lancer le déploiement distant
  #       run: |
  #         ssh -i private_key.pem ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} \
  #           "cd /home/${{ secrets.RASPBERRY_USER }}/app-${{ steps.env.outputs.env }} && chmod +x deploy.sh && ./deploy.sh ${{ steps.env.outputs.env }}"