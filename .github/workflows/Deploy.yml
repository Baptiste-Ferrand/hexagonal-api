name: FastAPI Docker CI/CD

on:
  push:
    branches:
      - develop
      - main
      - feat/CICD

jobs:
  setup-docker-tag:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: D√©finir le tag Docker en fonction de la branche
        id: set-tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tag=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "tag=pre-prod" >> $GITHUB_OUTPUT
          else
            echo "tag=pre-prod" >> $GITHUB_OUTPUT
          fi

  build-and-deploy-image:
    needs: setup-docker-tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout du d√©p√¥t
        uses: actions/checkout@v4

      - name: Valider le tag g√©n√©r√©
        run: |
          TAG="${{ needs.setup-docker-tag.outputs.docker_tag }}"
          if [[ ! "$TAG" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
            echo "Invalid tag format: $TAG"
            exit 1
          fi

      - name: Connexion √† GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Activer Buildx
        uses: docker/setup-buildx-action@v2

      - name: Construire et pousser l'image Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64/v8
          tags: ghcr.io/baptiste-ferrand/hexagonal-api:${{ needs.setup-docker-tag.outputs.docker_tag || 'latest' }}

  deploy:
    needs: build-and-deploy-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du d√©p√¥t
        uses: actions/checkout@v4

      - name: D√©duire l'environnement
        id: env
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "env=prod" >> $GITHUB_OUTPUT
          else
            echo "env=pre-prod" >> $GITHUB_OUTPUT
          fi

      - name: Cr√©er fichier .env
        run: |
            cat <<EOF > .env
            # ========================
            # üì¶ ENVIRONNEMENT
            # ========================
            ENV=${{ steps.env.outputs.env }}
            # ========================
            # üîê AUTH & DATABASE
            # ========================
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            BDD_NAME=${{ secrets.BDD_NAME }}
            BDD_USER=${{ secrets.BDD_USER }}
            BDD_PASSWORD=${{ secrets.BDD_PASSWORD }}
            DATABASE_URL=${{ vars.DATABASE_URL}}
            
            # ========================
            # ‚òÅÔ∏è MINIO
            # ========================
            MINIO_ACCESS_KEY=${{ secrets.MINIO_ACCESS_KEY }}
            MINIO_SECRET_KEY=${{ secrets.MINIO_SECRET_KEY }}
            MINIO_ENDPOINT=${{ vars.MINIO_ENDPOINT }}
            MINIO_PUBLIC_URL=${{ vars.MINIO_PUBLIC_URL }}
            MINIO_BUCKET=${{ vars.MINIO_BUCKET }}
            EOF

      - name: Pr√©parer cl√© SSH
        run: |
          echo "${{ secrets.RASPBERRY_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
  
      - name: üõ†Ô∏è Pr√©parer structure serveur distante
        run: |
          ssh -i private_key.pem ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} "\
            sudo mkdir -p /app && \
            sudo mkdir -p /app/${{ steps.env.outputs.env }}/nginx"

      - name: üöö Copier les fichiers sur le Raspberry
        run: |
          # Copier les fichiers sp√©cifiques √† l'environnement
          scp -i private_key.pem .env \
            docker-compose.${{ steps.env.outputs.env }}.yml \
            nginx/api.conf \
            ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }}:/app/${{ steps.env.outputs.env }}/

          # Copier le script de d√©ploiement √† la racine /app/
          scp -i private_key.pem deploy.sh \
            ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }}:/app/

      - name: üöÄ Lancer le d√©ploiement via SSH
        run: |
          ssh -i private_key.pem ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} \
            "cd /app && chmod +x deploy.sh && ./deploy.sh ${{ steps.env.outputs.env }}"